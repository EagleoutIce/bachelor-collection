\def\filename{sirius}
\ProvidesPackage{\filename}[2021/07/18 EagleoutIce - allow to interface with the sirius shell script (currently private)]

\def\sirius@error@se{%
  \PackageError{\filename}{sirius is a python script and does require write18 (amongst other deps)}{}%
}

\RequirePackage{pdftexcmds,environ,pgfkeys,etoolbox}
% allow 1
\ifcase\pdf@shellescape\sirius@error@se\or\or\sirius@error@se\fi
\newif\if@sirisu@showcollector@
\newcommand*\sirius{\bgroup\def\%{\char"25}\@ifnextchar[\@sirius\@@sirius}
\def\@sirius[#1]#2{\typeout{casts: sirius #2 '#1'}\immediate\write18{sirius #2 '#1'}\egroup}
\def\@@sirius#1{\typeout{casts: sirius #1}\immediate\write18{sirius #1}\egroup}
% TODO: improve obfuscate passthrough
\pgfkeys{%
  /sirius/.cd,
  api-version/.store in     = \sirius@file@api@version,
  snapshots/.store in       = \sirius@file@snapshots,
  start-year/.store in      = \sirius@model@year@start,
  end-year/.store in        = \sirius@model@year@end,
  connectors/.store in      = \sirius@model@connectors,
  % core
  title/.store in           = \sirius@core@title,
  hl/.store in              = \sirius@core@hl,
  % obfuscate/.store in       = \sirius@core@obfuscate,
  show-collector/.is if     = @sirisu@showcollector@,
  collector-width/.store in = \sirius@core@collector@width,
  auto-obfuscate/.store in  = \sirius@core@auto@obfuscate,
  description/.store in     = \sirius@core@description,
  host/.store in            = \sirius@core@host,
  verbose/.store in         = \sirius@core@verbose, % TODO: ifs/selection
  check-host/.store in      = \sirius@core@check@host,
  freshness/.store in       = \sirius@core@freshness,
  input-dir/.store in       = \sirius@core@input@dir,
  output-dir/.store in      = \sirius@core@output@dir,
  prefix/.store in          = \sirius@core@prefix,
  collapse/.store in        = \sirius@core@collapse,
  postfix/.store in         = \sirius@core@postfix,
  retain/.store in          = \sirius@core@defaults@retain,
  bb/.store in              = \sirius@core@defaults@bb,
  offsets/.style n args     = {4}{/sirius/offset l={#1},/sirius/offset b={#2},/sirius/offset r={#3},/sirius/offset t={#4}},
  offset l/.store in       = \sirius@core@defaults@offset@l,
  offset t/.store in       = \sirius@core@defaults@offset@t,
  offset r/.store in       = \sirius@core@defaults@offset@r,
  offset b/.store in       = \sirius@core@defaults@offset@b,
  hooks-after/.store in    = \sirius@core@defaults@hooks@after,
  defaults/.style={
    api-version=6,snapshots=[],collector-width=400,
    start-year=2020,end-year=2040,%
    connectors=[],retain=0,bb=m,offsets={-.33}{-.25}{-.25}{-.25},%
    title=Sirius-Config,host=http://0.0.0.0:8080,
    description=Automatically generated sirius configuration,
    verbose=false,freshness=250,check-host=true,collapse=true,
    input-dir=./,output-dir=./,prefix=,postfix=,hooks-after=,
    hl=,auto-obfuscate=%
  },
  /sirius/block/.cd,
  id/.store in             = \sirius@block@id,
  type/.store in           = \sirius@block@type,
  name/.store in           = \sirius@block@name,
  x/.store in              = \sirius@block@x,
  y/.store in              = \sirius@block@y,
  width/.store in          = \sirius@block@width,% TODO: Children
  canvas-height/.store in  = \sirius@block@canvasHeight,% TODO: Children
  defaults/.style={% TODO: bases
    id = \number\c@sirius@internal@id,
    type =  component,
    x = 0, y = 0, width = 250,canvas-height=0%
  },
  /sirius/property/.cd,
  id/.store in             = \sirius@elem@id,
  tag/.store in            = \sirius@elem@tag,
  name/.store in           = \sirius@elem@name,
  defaults/.style={%
    id = \number\c@sirius@internal@id,
    tag = property%
  },
  /sirius/requirement/.cd,
  id/.store in             = \sirius@elem@id,
  tag/.store in            = \sirius@elem@tag,
  name/.store in           = \sirius@elem@name,
  defaults/.style={%
    id = \number\c@sirius@internal@id,
    tag = requirement%
  }
}

% TODO: sirius also for file execution?! (or at least allow option)
\def\siriusdefaults#1{\pgfkeys{/sirius/defaults/.append style={#1}}}
\def\siriusblockdefaults#1{\pgfkeys{/sirius/block/defaults/.append style={#1}}}
\def\siriuspropertydefaults#1{\pgfkeys{/sirius/property/defaults/.append style={#1}}}

% todo: toggle, nesting, and usability in normal user code for  hidden nests
\long\def\sirius@t#1{\string\"#1\string\"}
\long\def\sirius@tn#1{\string\\\string\"#1\string\\\string\"}

\long\def\sirius@Meta#1{{%
  ".title": "\sirius@core@title",%
  ".description": "\sirius@core@description",%
  ".verbose": \sirius@core@verbose,%
  "freshness": \sirius@core@freshness,
  "host": "\sirius@core@host",
  ".check-host": \sirius@core@check@host,%
  "input-dir": "\sirius@core@input@dir",
  "output-dir": "\sirius@core@output@dir",% TODO: hooks and clips (.defaults)!
  "prefix": "\sirius@core@prefix",
  "postfix": "\sirius@core@postfix",
  "payloads": % Only one that will nest itself
    #1%
}}

\long\def\sirius@Single@Raw#1#2{{%
  "#1": {%
    #2,
    ".config": {
      "retain": \sirius@core@defaults@retain,
      "bb": "\sirius@core@defaults@bb",
      "offsets": "\sirius@core@defaults@offset@l\space\sirius@core@defaults@offset@b\space\sirius@core@defaults@offset@r\space\sirius@core@defaults@offset@t",%
      ".hook-after": [\sirius@core@defaults@hooks@after]%
    }% TODO: configure others
  }%
}}

\long\def\sirius@Single#1#2{{%
\sirius@Single@Raw{#1}{%
    ".inline": "#2",% yet \string\' escape messes up sh. therefore we use good old hacks. '"'"' does not work as well, as json has problems with single quotes
    "collapse": "\sirius@core@collapse",
    "hl64": "\sirius@core@hl",
    "obfuscate64": { "layout": { "layouter": "grid", "collector": { "width": \sirius@core@collector@width, "collapse": \if@sirisu@showcollector@ false\else true\fi } }, "cleanup": ["cleanupOverwrites", "cleanUpCollectorOrphans", "removeEmptyCanvas", "removeEmptyCollector"\if@sirisu@showcollector@\else, "collectorAsChild"\fi] },
    "auto-obfuscate64": "\sirius@core@auto@obfuscate",
    "model-view-positions64": { "x": 0, "y": 0 },
    "model-view-zooms64": [ 1 ]%
    % TODO: configure others
  }%
}}

\long\def\sirius@File#1#2#3{{
  \sirius@t{apiVersion}: #1,
  \sirius@t{snapshots}: #2,
  #3
}}

\newcommand*\sirius@Property[3][]{
  \global\advance\c@sirius@internal@id\@ne
  \edef\@elem@currid{\number\c@sirius@internal@id}%
  \pgfkeys{/sirius/property/.cd,defaults,#1,name=#2}%
  \ifx\sirius@current@entries\@empty\else\g@addto@macro\sirius@current@entries{,}\fi
  % Auto comma
  \protected@xappto\sirius@current@entries{{
    \sirius@t{id}: \sirius@t{\sirius@elem@id},
    \sirius@t{tag}: \sirius@t{\sirius@elem@tag},
    \sirius@t{name}: \sirius@t{\sirius@elem@name},
    \sirius@t{formula}: \sirius@t{#3}%
  }}%
}

\newcommand*\sirius@Requirement[3][]{
  \global\advance\c@sirius@internal@id\@ne
  \edef\@elem@currid{\number\c@sirius@internal@id}%
  \pgfkeys{/sirius/requirement/.cd,defaults,#1,name=#2}%
  \ifx\sirius@current@entries\@empty\else\g@addto@macro\sirius@current@entries{,}\fi
  % Auto comma
  \protected@xappto\sirius@current@entries{{
    \sirius@t{id}: \sirius@t{\sirius@elem@id},
    \sirius@t{tag}: \sirius@t{\sirius@elem@tag},
    \sirius@t{name}: \sirius@t{\sirius@elem@name},
    \sirius@t{formula}: \sirius@t{#3}%
  }}%
}

\long\def\sirius@Model#1#2#3#4{ \sirius@t{model}: {
  \sirius@t{startYear}: #1,
  \sirius@t{endYear}: #2,
  \sirius@t{connectors}: #3,
  \sirius@t{rootBlocks}: [#4]
}}

% bases with '()' to make them fully optional
\def\sirius@Block{\@ifnextchar[\@sirius@Block{\@sirius@Block[]}}
\def\@sirius@Block[#1]#2#3{\@ifnextchar({\@sirius@Block[#1]{#2}{#3}}{\@@sirius@Block[#1]{#2}{#3}()}}%
\def\@@sirius@Block[#1]#2#3(#4){%
  \global\advance\c@sirius@internal@id\@ne
  \edef\@blk@currid{\number\c@sirius@internal@id}%
  \pgfkeys{/sirius/block/.cd,defaults,#1,name=#2}%
\let\sirius@current@entries\@empty % TODO: block nestings!
\relax#3%
\ifx\sirius@currentbody\@empty\else\g@addto@macro\sirius@currentbody{,}\fi
\protected@xappto\sirius@currentbody{{
  \sirius@t{id}: \sirius@t{\sirius@block@id},
  \sirius@t{type}: \sirius@t{\sirius@block@type},
  \sirius@t{name}: \sirius@t{\sirius@block@name},
  \sirius@t{position}: { \sirius@t{x}: \sirius@block@x, \sirius@t{y}: \sirius@block@y },
  \sirius@t{width}: \sirius@block@width,
  \sirius@t{canvasHeight}: \sirius@block@canvasHeight,
  \sirius@t{entries}: [\sirius@current@entries],
  \sirius@t{children}: [#4]%
}}}
\newcount\c@sirius@internal@id

% #2 is unique identifier for target filename
% TODO: support for multiple singles?
% Note Writing those directly does not work, as '\Block' has to perform
% key calculation that mess up the naive write routine...
\NewEnviron{sirius-draw}[2][]{\savebox\voidb@x{\begingroup\let\Block\sirius@Block\let\Property\sirius@Property\let\Requirement\sirius@Requirement\let\s\sirius@tn
\c@sirius@internal@id0\relax
\pgfkeys{/sirius/.cd,defaults,#1}%
\let\sirius@currentbody\@empty % TODO: block nestings!
\BODY\relax
\def\@sirius@extra{\sirius@Meta{\sirius@Single{#2}{\sirius@File{\sirius@file@api@version}{\sirius@file@snapshots}{%
\sirius@Model{\sirius@model@year@start}{\sirius@model@year@end}{\sirius@model@connectors}{\sirius@currentbody}%
}}}}%
\bgroup\@sirius[\@sirius@extra]{.noouse-file}\relax
\endgroup}}
% IMPORTANT NOTE: 'auto-export' will be added manually, so the linked url will not contain it
\newcommand*\sirius@url[2][]{\begingroup\sirius@@url{#1}{#2}}
\def\sirius@@url#1#2{\let\do\@makeother\dospecials\catcode`{\@ne\catcode`}\tw@\catcode`\ =10 \catcode`\#=6\@ifnextchar\bgroup{\obeyspaces\obeylines\sirius@@@url{#1}{#2}}\sirius@@@url@}
\def\sirius@@@url@#1#2#3{\catcode`{11\catcode`}11\obeyspaces\obeylines\def\@tempa##1#3{\sirius@@@url{#1}{#2}{##1}}\@tempa}
\def\sirius@@@url#1#2#3{\toks@{#3}\edef\sirius@@urlstring{\the\toks@}\edef\sirius@@@urlstring{\expandafter\strip@prefix\meaning\sirius@@urlstring}%
\pgfkeys{/sirius/.cd,defaults,#1}\expandafter\xdef\csname sirius@url@#2\endcsname{\sirius@core@host/?\sirius@@@urlstring}\bgroup\@sirius[\sirius@Meta{\sirius@Single@Raw{#2}{".url": "\sirius@@@urlstring&auto-export=1" }}]{.noouse-file}\endgroup}

\def\sirius@geturl#1{\csname sirius@url@#1\endcsname}

\let\siriusurl\sirius@url
\let\siriusGetUrl\sirius@geturl

% TODO: give me block like interface:
% '\Block{}'... => Defintion file for sirius-generate or so
\endinput