%% iris icon network generator package
%% Florian Sihler, 2021-03-14

\ProvidesPackage{iris-ico-net}[2021/03/14 v1.0 iris icon network generator package]

\RequirePackage{tikz,etoolbox}

% TODO: color Palettes
% TODO: extend with kprim selection etc
% TODO: cycle colors
\colorlet{iinet@block}{green}
\colorlet{iinet@connection}{purple}

\newcounter{iinet@block@count}

% The goal is to create small icons of given sizes
% which all present a random but simple iris icon
% pt will serve as the basic unit

\def\iinet@newlength#1=#2;{% legacy :C
\expandafter\newlength\csname iinet@#1\endcsname
\expandafter\newlength\csname iinet@default@#1\endcsname
\expandafter\csname iinet@default@#1\endcsname=#2}
\def\iinet@newreg#1=#2;{\expandafter\def\csname iinet@default@#1\endcsname{#2}}

\iinet@newreg padding@x=2;
\iinet@newreg padding@y=2;

% TODO make this 42 again :D
\iinet@newreg width=22;
\iinet@newreg height=10;

\iinet@newreg block@min@width=5;
\iinet@newreg block@max@width=8;
\iinet@newreg block@min@height=3;
\iinet@newreg block@max@height=5;

\newif\if@iinet@drawframe
\newif\if@iinet@drawgrid
\tikzset{%
    iinet@frame/.style={draw,rounded corners=2pt},
    iinet@grid/.style={gray,ultra thin,step=1},
    iinet@block/.style={fill=#1,draw=#1,rounded corners=.25pt}%
}

\pgfkeys{%
    /iinet@keys/.is family, /iinet@keys,
    width/.store in=\iinet@width, height/.store in=\iinet@height,
    padding/.code={\def\iinet@padding@x{#1}\def\iinet@padding@y{#1}},
    padding x/.store in=\iinet@padding@x,
    padding y/.store in=\iinet@padding@y,
    block min width/.store in=\iinet@block@min@width,
    block max width/.store in=\iinet@block@max@width,
    block min height/.store in=\iinet@block@min@height,
    block max height/.store in=\iinet@block@max@height,
    frame/.is if=@iinet@drawframe,
    grid/.is if=@iinet@drawgrid,
    defaults/.style={%
        width=\iinet@default@width, height=\iinet@default@height,
        padding x=\iinet@default@padding@x, padding y=\iinet@default@padding@y,
        block min width=\iinet@default@block@min@width,
        block max width=\iinet@default@block@max@width,
        block min height=\iinet@default@block@min@height,
        block max height=\iinet@default@block@max@height,
    }%
}

% location (upper-left) | color | width | height
\def\iinet@draw@single@@block#1#2#3#4{%
    \path[iinet@block=#2] (#1) rectangle ++(#3,#4);
}

\def\iinet@getblock#1{\csname iinet@block@\arabic{iinet@block@count}@#1\endcsname}

\def\iinet@setblock#1#2{%
\expandafter\edef\csname iinet@block@\arabic{iinet@block@count}@#1\endcsname{#2}%
}

\def\iinet@setblockrand#1#2#3{\pgfmathrandominteger{\@iinet@tmp}{#2}{#3}\setblock{#1}{\@iinet@tmp}}


%%% How (TODO: rasterize: TODO: maximum number? TODO: padding [save #pt bigger blocks?])
% NOTE: changed usage... not min; inefficient approach at first ^^
% 1) calculate differences between min and max for both dimens: block@dif@{x,y}
% 2) hold a list for all y with [height-block@min@height] elements:
%       list for all x with [width-block@min@width] elements
%    => Listname is 'matrix'
% 3) update present squares:
%   foreach y:
%     max@[y]@x = min(longest consecutive x in cur:y, block@dif@x)
%     if max@[y]@x<block@min@x: [[Throw; y]]
%   max@y = min(longest consecutive y, block@dif@y)
%   if max@y<block@min@y: [[ERROR]]
%
% update present squares()
%
% ------------------------
% rand@h = rand(block@y@min, max@y)
% pick random y in list.
%   if any in [y..y+rand@h] not in ylist: [[mod-cycle until it fits]] // has to for y
%   (side:) calculate max@x width possible in [y..y+rand@h] // has to for x
% rand@w = rand(block@x@min, max@x)
% pick random x fitting that width
%
% place block (x, y, rand@w, rand@h)

\newcounter{iinet@x}
\newcounter{iinet@y}
\newcounter{iinet@a}
\newcounter{iinet@b}

\def\iinet@calcdiffs{
    \edef\iinet@block@dif@x
        {\the\numexpr\iinet@block@max@width-\iinet@block@min@width\relax}
    \edef\iinet@block@dif@y
        {\the\numexpr\iinet@block@max@height-\iinet@block@min@height\relax}
    \edef\iinet@matrix@x
        {\the\numexpr\iinet@width\relax}
    \edef\iinet@matrix@y
        {\the\numexpr\iinet@height\relax}
}

\def\iinet@element{}

%%% The Lists (why not rndlist? Manipulating them can be quite tedious)
\def\iinet@setup@matrix{
    \iinet@m@for@y{% for each y
        \expandafter\let\csname iinet@m@\arabic{iinet@y}\endcsname\iinet@element
        \iinet@m@for@x{% for each x
            \expandafter\let\csname iinet@m@\arabic{iinet@y}@%
                        \arabic{iinet@x}\endcsname\iinet@element
        }
    }
    \iinet@update@present@squares
}

% (x, y)
\def\iinet@m@get(#1,#2){\@nameuse{iinet@m@#2@#1}}
% (x, y) but with counters
\def\iinet@m@cget(#1,#2){\iinet@m@get(\arabic{#1},\arabic{#2})}


\long\def\iinet@if@m@free(#1,#2)#3#4{\ifcsname iinet@m@#2@#1\endcsname#3\else#4\fi}
\def\iinet@if@m@cfree(#1,#2){\iinet@if@m@free(\arabic{#1},\arabic{#2})}


\def\iinet@m@block(#1,#2){%
    \expandafter\expandafter\expandafter\expandafter\expandafter\expandafter\expandafter%
    \undef\iinet@m@get(#1,#2)}

\long\def\iinet@m@for@y#1{%
\setcounter{iinet@y}{0}%
\@whilenum\value{iinet@y}<\iinet@matrix@y\do{%
    \setcounter{iinet@x}{0}#1\stepcounter{iinet@y}%
}}

\long\def\iinet@m@for@x#1{%
\@whilenum\value{iinet@x}<\iinet@matrix@x\do{% for each x
    #1\stepcounter{iinet@x}%
}}


\def\iinet@m@max@of@y#1{\ifcsname iinet@max@#1@x\endcsname\@nameuse{iinet@max@#1@x}\else-1\fi}
\def\iinet@get@consecutive@x@{\ifnum\value{iinet@a}>\@iinet@con@x\edef\@iinet@con@x{\arabic{iinet@a}}\fi\setcounter{iinet@a}{0}}
\def\iinet@get@consecutive@x{%
    % do not run if already known 0
    \ifnum\iinet@m@max@of@y{\arabic{iinet@y}}=0\else
    \setcounter{iinet@a}{0}% current
    \def\@iinet@con@x{0}% maximum
    \iinet@m@for@x{%
        \iinet@if@m@cfree(iinet@x,iinet@y)%
            {\stepcounter{iinet@a}}% free
            {\iinet@get@consecutive@x@}%
    }\iinet@get@consecutive@x@\fi
}

\def\iinet@get@consecutive@y@{\ifnum\value{iinet@a}>\@iinet@con@y\edef\@iinet@con@y{\arabic{iinet@a}}\fi\setcounter{iinet@a}{0}}
\def\iinet@get@consecutive@y{%
    \setcounter{iinet@a}{0}% current
    \def\@iinet@con@y{0}% maximum
    \iinet@m@for@y{%
        \ifnum\iinet@m@max@of@y{\arabic{iinet@y}}=0%
            \iinet@get@consecutive@y@
        \else
            \stepcounter{iinet@a}%
        \fi
    }\iinet@get@consecutive@y@
}

\def\iinet@update@present@squares{%
    % TODO: set error flag (if?) in case of insufficient dimensions
    \iinet@m@for@y{%
        \iinet@get@consecutive@x
        \expandafter\edef\csname iinet@max@\arabic{iinet@y}@x\endcsname{\@iinet@con@x}%
    }
    \iinet@get@consecutive@y
    \expandafter\edef\csname iinet@max@y\endcsname{\@iinet@con@y}%
}

\def\iinet@debug@line{====================================}
\def\iinet@debug@show@matrix{%
    \typeout{\iinet@debug@line}%
    \typeout{[Constructed \iinet@matrix@x x\iinet@matrix@y; \@nameuse{iinet@max@y}]}
    \iinet@m@for@y{% for each y
        \def\iinet@linebuf{}% clear
        \iinet@m@for@x{% for each x
            \iinet@if@m@cfree(iinet@x,iinet@y)%
                {\g@addto@macro\iinet@linebuf{_}}% free
                {\g@addto@macro\iinet@linebuf{O}}% occupied
        }
        \typeout{\iinet@linebuf\space[\arabic{iinet@y}, \iinet@m@max@of@y{\arabic{iinet@y}}]}
    }
    \typeout{\iinet@debug@line}
}


% get{w} and get{h} for current dimens
\def\iinet@block@randxy{
    \iinet@calcdiffs% 1)
    \iinet@setup@matrix% 2)
    \foreach \i in {0,...,19}{\globaldefs=1\iinet@m@block(\i,1)}
    \iinet@m@block(5,2)
    \iinet@m@block(6,2)
    \iinet@update@present@squares
    \iinet@debug@show@matrix% Debug :)
    \setblockrand{x}{0}{\iinet@width-\get{w}}
    \setblockrand{y}{0}{\iinet@height-\get{h}}
}


\def\iinet@draw@single@block{
  \stepcounter{iinet@block@count}
  % \set and allocate dimens
  \setblock{c}{iinet@block}
  \setblockrand{w}{\iinet@block@min@width}{\iinet@block@max@width}
  \setblockrand{h}{\iinet@block@min@height}{\iinet@block@max@height}
  \iinet@block@randxy
  \typeout{Block[\get{c}](\get{x},\get{y},\get{w},\get{h})}
  \iinet@draw@single@@block{\get{x},\get{y}}{\get{c}}{\get{w}}{\get{h}}
}

\def\iinet@init#1{%
    \pgfkeys{/iinet@keys,defaults,#1}%
    \setcounter{iinet@block@count}{0}%
}

\newcommand*\IrisIcoNet[1][]{%
    \iinet@init{#1}%
    \begin{tikzpicture}[x=1pt,y=1pt]
        \let\get\iinet@getblock
        \let\setblock\iinet@setblock
        \let\setblockrand\iinet@setblockrand
        \if@iinet@drawgrid\draw[iinet@grid] (-\iinet@padding@x,-\iinet@padding@y) grid (\iinet@width+\iinet@padding@x,\iinet@height+\iinet@padding@y);\fi
        \path[use as bounding box,\if@iinet@drawframe iinet@frame\fi]
            (-\iinet@padding@x,-\iinet@padding@y) rectangle (\iinet@width+\iinet@padding@x,\iinet@height+\iinet@padding@y);

        \iinet@draw@single@block
    \end{tikzpicture}%
}


\endinput